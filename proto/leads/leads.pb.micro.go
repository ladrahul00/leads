// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/leads/leads.proto

package go_micro_service_leads

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"

	context "context"

	client "github.com/micro/go-micro/v2/client"

	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Leads service

type LeadsService interface {
	NewLead(ctx context.Context, in *NewLeadRequest, opts ...client.CallOption) (*NewLeadResponse, error)
}

type leadsService struct {
	c    client.Client
	name string
}

func NewLeadsService(name string, c client.Client) LeadsService {
	return &leadsService{
		c:    c,
		name: name,
	}
}

func (c *leadsService) NewLead(ctx context.Context, in *NewLeadRequest, opts ...client.CallOption) (*NewLeadResponse, error) {
	req := c.c.NewRequest(c.name, "Leads.NewLead", in)
	out := new(NewLeadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Leads service

type LeadsHandler interface {
	NewLead(context.Context, *NewLeadRequest, *NewLeadResponse) error
}

func RegisterLeadsHandler(s server.Server, hdlr LeadsHandler, opts ...server.HandlerOption) error {
	type leads interface {
		NewLead(ctx context.Context, in *NewLeadRequest, out *NewLeadResponse) error
	}
	type Leads struct {
		leads
	}
	h := &leadsHandler{hdlr}
	return s.Handle(s.NewHandler(&Leads{h}, opts...))
}

type leadsHandler struct {
	LeadsHandler
}

func (h *leadsHandler) NewLead(ctx context.Context, in *NewLeadRequest, out *NewLeadResponse) error {
	return h.LeadsHandler.NewLead(ctx, in, out)
}
